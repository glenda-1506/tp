@startuml

actor User
participant Duke
participant ExpenseManager
participant TrackerData
participant Expense
participant Category

User -> Duke : "add-expense n/[name] a/[amount] c/[category]"
activate Duke

alt Valid input
    Duke -> ExpenseManager : addExpense(TrackerData, name, amount, categoryName)
    activate ExpenseManager
    ExpenseManager -> TrackerData : getExpenses()
    activate TrackerData
    TrackerData --> ExpenseManager : List<Expense>
    deactivate TrackerData

    ExpenseManager -> TrackerData : getCategories()
    activate TrackerData
    TrackerData --> ExpenseManager : List<Category>
    deactivate TrackerData

    alt Category exists
        ExpenseManager -> ExpenseManager : formatInput(categoryName)
        activate ExpenseManager
        ExpenseManager --> ExpenseManager : formattedCategoryName
        deactivate ExpenseManager
    else Category does not exist
        ExpenseManager -> Category : Category(formattedCategoryName)
        activate Category
        Category --> ExpenseManager : Category object
        deactivate Category
        ExpenseManager -> TrackerData : setCategories(updatedCategories)
    end

    ExpenseManager -> Expense : Expense(name, amount, existingCategory)
    activate Expense
    Expense --> ExpenseManager : Expense object
    deactivate Expense

    ExpenseManager -> TrackerData : setExpenses(updatedExpenses)
    deactivate ExpenseManager
    Duke --> User : "Expense added successfully"
else Invalid input
    Duke --> User : "Invalid input! Please provide name, amount, and category."
end
deactivate Duke

@enduml